{"ast":null,"code":"import { mockBusinesses, mockProducts, mockEvents, mockDiscounts, mockUser } from './mockData';\n\n// Simulate API delays\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\nexport class LocalizeAPI {\n  static async getUser() {\n    await delay(300);\n    return mockUser;\n  }\n  static async getBusinesses() {\n    await delay(500);\n    return mockBusinesses.map(business => ({\n      ...business,\n      products: mockProducts.filter(product => product.businessId === business.id)\n    }));\n  }\n  static async getBusiness(id) {\n    await delay(300);\n    const business = mockBusinesses.find(b => b.id === id);\n    if (!business) return null;\n    return {\n      ...business,\n      products: mockProducts.filter(product => product.businessId === business.id)\n    };\n  }\n  static async getEvents() {\n    await delay(400);\n    return mockEvents;\n  }\n  static async getEvent(id) {\n    await delay(300);\n    return mockEvents.find(e => e.id === id) || null;\n  }\n  static async getDiscounts() {\n    await delay(400);\n    return mockDiscounts;\n  }\n  static async getUserInteractions() {\n    await delay(400);\n    // Mock user interactions for demo\n    return [{\n      id: '1',\n      userId: mockUser.id,\n      type: 'check-in',\n      businessId: '1',\n      pointsEarned: 25,\n      pointsSpent: 0,\n      timestamp: new Date('2024-03-10T10:30:00')\n    }, {\n      id: '2',\n      userId: mockUser.id,\n      type: 'event-attendance',\n      eventId: '1',\n      pointsEarned: 50,\n      pointsSpent: 0,\n      timestamp: new Date('2024-03-08T14:00:00')\n    }];\n  }\n  static async checkInToBusiness(businessId) {\n    await delay(500);\n    // Simulate check-in and point reward\n    return {\n      points: 25\n    };\n  }\n  static async attendEvent(eventId) {\n    await delay(500);\n    const event = mockEvents.find(e => e.id === eventId);\n    return {\n      points: (event === null || event === void 0 ? void 0 : event.pointsReward) || 25\n    };\n  }\n  static async redeemDiscount(discountId) {\n    await delay(500);\n    // Simulate discount redemption\n    return {\n      success: true\n    };\n  }\n  static async searchBusinesses(query) {\n    await delay(300);\n    const businesses = await this.getBusinesses();\n    return businesses.filter(business => business.name.toLowerCase().includes(query.toLowerCase()) || business.description.toLowerCase().includes(query.toLowerCase()) || business.category.toLowerCase().includes(query.toLowerCase()));\n  }\n  static async getBusinessesByCategory(category) {\n    await delay(300);\n    const businesses = await this.getBusinesses();\n    return businesses.filter(business => business.category === category);\n  }\n}","map":{"version":3,"names":["mockBusinesses","mockProducts","mockEvents","mockDiscounts","mockUser","delay","ms","Promise","resolve","setTimeout","LocalizeAPI","getUser","getBusinesses","map","business","products","filter","product","businessId","id","getBusiness","find","b","getEvents","getEvent","e","getDiscounts","getUserInteractions","userId","type","pointsEarned","pointsSpent","timestamp","Date","eventId","checkInToBusiness","points","attendEvent","event","pointsReward","redeemDiscount","discountId","success","searchBusinesses","query","businesses","name","toLowerCase","includes","description","category","getBusinessesByCategory"],"sources":["/Users/beckettdunlavy/Localize/src/services/api.ts"],"sourcesContent":["import { Business, Product, Event, Discount, User, UserInteraction } from '../types';\nimport { mockBusinesses, mockProducts, mockEvents, mockDiscounts, mockUser } from './mockData';\n\n// Simulate API delays\nconst delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));\n\nexport class LocalizeAPI {\n  static async getUser(): Promise<User> {\n    await delay(300);\n    return mockUser;\n  }\n\n  static async getBusinesses(): Promise<Business[]> {\n    await delay(500);\n    return mockBusinesses.map(business => ({\n      ...business,\n      products: mockProducts.filter(product => product.businessId === business.id),\n    }));\n  }\n\n  static async getBusiness(id: string): Promise<Business | null> {\n    await delay(300);\n    const business = mockBusinesses.find(b => b.id === id);\n    if (!business) return null;\n\n    return {\n      ...business,\n      products: mockProducts.filter(product => product.businessId === business.id),\n    };\n  }\n\n  static async getEvents(): Promise<Event[]> {\n    await delay(400);\n    return mockEvents;\n  }\n\n  static async getEvent(id: string): Promise<Event | null> {\n    await delay(300);\n    return mockEvents.find(e => e.id === id) || null;\n  }\n\n  static async getDiscounts(): Promise<Discount[]> {\n    await delay(400);\n    return mockDiscounts;\n  }\n\n  static async getUserInteractions(): Promise<UserInteraction[]> {\n    await delay(400);\n    // Mock user interactions for demo\n    return [\n      {\n        id: '1',\n        userId: mockUser.id,\n        type: 'check-in',\n        businessId: '1',\n        pointsEarned: 25,\n        pointsSpent: 0,\n        timestamp: new Date('2024-03-10T10:30:00'),\n      },\n      {\n        id: '2',\n        userId: mockUser.id,\n        type: 'event-attendance',\n        eventId: '1',\n        pointsEarned: 50,\n        pointsSpent: 0,\n        timestamp: new Date('2024-03-08T14:00:00'),\n      },\n    ];\n  }\n\n  static async checkInToBusiness(businessId: string): Promise<{ points: number }> {\n    await delay(500);\n    // Simulate check-in and point reward\n    return { points: 25 };\n  }\n\n  static async attendEvent(eventId: string): Promise<{ points: number }> {\n    await delay(500);\n    const event = mockEvents.find(e => e.id === eventId);\n    return { points: event?.pointsReward || 25 };\n  }\n\n  static async redeemDiscount(discountId: string): Promise<{ success: boolean }> {\n    await delay(500);\n    // Simulate discount redemption\n    return { success: true };\n  }\n\n  static async searchBusinesses(query: string): Promise<Business[]> {\n    await delay(300);\n    const businesses = await this.getBusinesses();\n    return businesses.filter(business =>\n      business.name.toLowerCase().includes(query.toLowerCase()) ||\n      business.description.toLowerCase().includes(query.toLowerCase()) ||\n      business.category.toLowerCase().includes(query.toLowerCase())\n    );\n  }\n\n  static async getBusinessesByCategory(category: string): Promise<Business[]> {\n    await delay(300);\n    const businesses = await this.getBusinesses();\n    return businesses.filter(business => business.category === category);\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}